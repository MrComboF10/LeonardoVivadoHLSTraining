// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="crazyFunction_crazyFunction,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=158,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3430,HLS_SYN_LUT=4735,HLS_VERSION=2022_2}" *)

module crazyFunction (
        ap_clk,
        ap_rst_n,
        x_Addr_A,
        x_EN_A,
        x_WEN_A,
        x_Din_A,
        x_Dout_A,
        x_Clk_A,
        x_Rst_A,
        res_Addr_A,
        res_EN_A,
        res_WEN_A,
        res_Din_A,
        res_Dout_A,
        res_Clk_A,
        res_Rst_A,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_state6 = 29'd32;
parameter    ap_ST_fsm_state7 = 29'd64;
parameter    ap_ST_fsm_state8 = 29'd128;
parameter    ap_ST_fsm_state9 = 29'd256;
parameter    ap_ST_fsm_state10 = 29'd512;
parameter    ap_ST_fsm_state11 = 29'd1024;
parameter    ap_ST_fsm_state12 = 29'd2048;
parameter    ap_ST_fsm_state13 = 29'd4096;
parameter    ap_ST_fsm_state14 = 29'd8192;
parameter    ap_ST_fsm_state15 = 29'd16384;
parameter    ap_ST_fsm_state16 = 29'd32768;
parameter    ap_ST_fsm_state17 = 29'd65536;
parameter    ap_ST_fsm_state18 = 29'd131072;
parameter    ap_ST_fsm_state19 = 29'd262144;
parameter    ap_ST_fsm_state20 = 29'd524288;
parameter    ap_ST_fsm_state21 = 29'd1048576;
parameter    ap_ST_fsm_state22 = 29'd2097152;
parameter    ap_ST_fsm_state23 = 29'd4194304;
parameter    ap_ST_fsm_state24 = 29'd8388608;
parameter    ap_ST_fsm_state25 = 29'd16777216;
parameter    ap_ST_fsm_state26 = 29'd33554432;
parameter    ap_ST_fsm_state27 = 29'd67108864;
parameter    ap_ST_fsm_pp0_stage0 = 29'd134217728;
parameter    ap_ST_fsm_state60 = 29'd268435456;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] x_Addr_A;
output   x_EN_A;
output  [3:0] x_WEN_A;
output  [31:0] x_Din_A;
input  [31:0] x_Dout_A;
output   x_Clk_A;
output   x_Rst_A;
output  [31:0] res_Addr_A;
output   res_EN_A;
output  [3:0] res_WEN_A;
output  [31:0] res_Din_A;
input  [31:0] res_Dout_A;
output   res_Clk_A;
output   res_Rst_A;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

reg x_EN_A;
reg res_EN_A;
reg[3:0] res_WEN_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] y;
reg   [31:0] y_read_reg_183;
wire   [31:0] grp_fu_133_p2;
reg   [31:0] x_assign_1_reg_188;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_128_p2;
reg   [31:0] tmp_s_reg_193;
wire    ap_CS_fsm_state27;
wire   [63:0] i_cast_fu_158_p1;
reg   [63:0] i_cast_reg_201;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state28_pp0_stage0_iter0;
wire    ap_block_state29_pp0_stage0_iter1;
wire    ap_block_state30_pp0_stage0_iter2;
wire    ap_block_state31_pp0_stage0_iter3;
wire    ap_block_state32_pp0_stage0_iter4;
wire    ap_block_state33_pp0_stage0_iter5;
wire    ap_block_state34_pp0_stage0_iter6;
wire    ap_block_state35_pp0_stage0_iter7;
wire    ap_block_state36_pp0_stage0_iter8;
wire    ap_block_state37_pp0_stage0_iter9;
wire    ap_block_state38_pp0_stage0_iter10;
wire    ap_block_state39_pp0_stage0_iter11;
wire    ap_block_state40_pp0_stage0_iter12;
wire    ap_block_state41_pp0_stage0_iter13;
wire    ap_block_state42_pp0_stage0_iter14;
wire    ap_block_state43_pp0_stage0_iter15;
wire    ap_block_state44_pp0_stage0_iter16;
wire    ap_block_state45_pp0_stage0_iter17;
wire    ap_block_state46_pp0_stage0_iter18;
wire    ap_block_state47_pp0_stage0_iter19;
wire    ap_block_state48_pp0_stage0_iter20;
wire    ap_block_state49_pp0_stage0_iter21;
wire    ap_block_state50_pp0_stage0_iter22;
wire    ap_block_state51_pp0_stage0_iter23;
wire    ap_block_state52_pp0_stage0_iter24;
wire    ap_block_state53_pp0_stage0_iter25;
wire    ap_block_state54_pp0_stage0_iter26;
wire    ap_block_state55_pp0_stage0_iter27;
wire    ap_block_state56_pp0_stage0_iter28;
wire    ap_block_state57_pp0_stage0_iter29;
wire    ap_block_state58_pp0_stage0_iter30;
wire    ap_block_state59_pp0_stage0_iter31;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln8_fu_146_p2;
reg   [63:0] i_cast_reg_201_pp0_iter1_reg;
reg   [63:0] i_cast_reg_201_pp0_iter2_reg;
reg   [63:0] i_cast_reg_201_pp0_iter3_reg;
reg   [63:0] i_cast_reg_201_pp0_iter4_reg;
reg   [63:0] i_cast_reg_201_pp0_iter5_reg;
reg   [63:0] i_cast_reg_201_pp0_iter6_reg;
reg   [63:0] i_cast_reg_201_pp0_iter7_reg;
reg   [63:0] i_cast_reg_201_pp0_iter8_reg;
reg   [63:0] i_cast_reg_201_pp0_iter9_reg;
reg   [63:0] i_cast_reg_201_pp0_iter10_reg;
reg   [63:0] i_cast_reg_201_pp0_iter11_reg;
reg   [63:0] i_cast_reg_201_pp0_iter12_reg;
reg   [63:0] i_cast_reg_201_pp0_iter13_reg;
reg   [63:0] i_cast_reg_201_pp0_iter14_reg;
reg   [63:0] i_cast_reg_201_pp0_iter15_reg;
reg   [63:0] i_cast_reg_201_pp0_iter16_reg;
reg   [63:0] i_cast_reg_201_pp0_iter17_reg;
reg   [63:0] i_cast_reg_201_pp0_iter18_reg;
reg   [63:0] i_cast_reg_201_pp0_iter19_reg;
reg   [63:0] i_cast_reg_201_pp0_iter20_reg;
reg   [63:0] i_cast_reg_201_pp0_iter21_reg;
reg   [63:0] i_cast_reg_201_pp0_iter22_reg;
reg   [63:0] i_cast_reg_201_pp0_iter23_reg;
reg   [63:0] i_cast_reg_201_pp0_iter24_reg;
reg   [63:0] i_cast_reg_201_pp0_iter25_reg;
reg   [63:0] i_cast_reg_201_pp0_iter26_reg;
reg   [63:0] i_cast_reg_201_pp0_iter27_reg;
reg   [63:0] i_cast_reg_201_pp0_iter28_reg;
reg   [63:0] i_cast_reg_201_pp0_iter29_reg;
reg   [63:0] i_cast_reg_201_pp0_iter30_reg;
reg   [31:0] x_load_reg_211;
wire   [31:0] grp_sin_or_cos_float_s_fu_106_ap_return;
reg   [31:0] tmp_7_reg_216;
wire   [31:0] grp_fu_119_p2;
reg   [31:0] add_reg_221;
wire   [31:0] grp_fu_123_p2;
reg   [31:0] div_reg_226;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state28;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
wire    grp_sin_or_cos_float_s_fu_106_ap_start;
wire    grp_sin_or_cos_float_s_fu_106_ap_done;
wire    grp_sin_or_cos_float_s_fu_106_ap_idle;
wire    grp_sin_or_cos_float_s_fu_106_ap_ready;
wire   [31:0] grp_sin_or_cos_float_s_fu_106_t_in;
reg    grp_sin_or_cos_float_s_fu_106_ap_start_reg;
wire    ap_block_pp0_stage0;
reg   [6:0] i_fu_70;
wire   [6:0] add_ln8_fu_152_p2;
wire   [31:0] x_Addr_A_orig;
wire   [31:0] res_Addr_A_orig;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state60;
reg   [28:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state60_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 29'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 grp_sin_or_cos_float_s_fu_106_ap_start_reg = 1'b0;
end

crazyFunction_sin_or_cos_float_s grp_sin_or_cos_float_s_fu_106(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sin_or_cos_float_s_fu_106_ap_start),
    .ap_done(grp_sin_or_cos_float_s_fu_106_ap_done),
    .ap_idle(grp_sin_or_cos_float_s_fu_106_ap_idle),
    .ap_ready(grp_sin_or_cos_float_s_fu_106_ap_ready),
    .t_in(grp_sin_or_cos_float_s_fu_106_t_in),
    .ap_return(grp_sin_or_cos_float_s_fu_106_ap_return)
);

crazyFunction_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .y(y),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

crazyFunction_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_7_reg_216),
    .din1(tmp_s_reg_193),
    .ce(1'b1),
    .dout(grp_fu_119_p2)
);

crazyFunction_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U23(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(add_reg_221),
    .din1(32'd1056964608),
    .ce(1'b1),
    .dout(grp_fu_123_p2)
);

crazyFunction_fsqrt_32ns_32ns_32_16_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsqrt_32ns_32ns_32_16_no_dsp_1_U24(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd0),
    .din1(x_assign_1_reg_188),
    .ce(1'b1),
    .dout(grp_fu_128_p2)
);

crazyFunction_fexp_32ns_32ns_32_10_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fexp_32ns_32ns_32_10_full_dsp_1_U25(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd0),
    .din1(y_read_reg_183),
    .ce(1'b1),
    .dout(grp_fu_133_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state28) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state28)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state28);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp0_iter31 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_sin_or_cos_float_s_fu_106_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            grp_sin_or_cos_float_s_fu_106_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_float_s_fu_106_ap_ready == 1'b1)) begin
            grp_sin_or_cos_float_s_fu_106_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_70 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln8_fu_146_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_fu_70 <= add_ln8_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_reg_221 <= grp_fu_119_p2;
        div_reg_226 <= grp_fu_123_p2;
        i_cast_reg_201_pp0_iter10_reg[6 : 0] <= i_cast_reg_201_pp0_iter9_reg[6 : 0];
        i_cast_reg_201_pp0_iter11_reg[6 : 0] <= i_cast_reg_201_pp0_iter10_reg[6 : 0];
        i_cast_reg_201_pp0_iter12_reg[6 : 0] <= i_cast_reg_201_pp0_iter11_reg[6 : 0];
        i_cast_reg_201_pp0_iter13_reg[6 : 0] <= i_cast_reg_201_pp0_iter12_reg[6 : 0];
        i_cast_reg_201_pp0_iter14_reg[6 : 0] <= i_cast_reg_201_pp0_iter13_reg[6 : 0];
        i_cast_reg_201_pp0_iter15_reg[6 : 0] <= i_cast_reg_201_pp0_iter14_reg[6 : 0];
        i_cast_reg_201_pp0_iter16_reg[6 : 0] <= i_cast_reg_201_pp0_iter15_reg[6 : 0];
        i_cast_reg_201_pp0_iter17_reg[6 : 0] <= i_cast_reg_201_pp0_iter16_reg[6 : 0];
        i_cast_reg_201_pp0_iter18_reg[6 : 0] <= i_cast_reg_201_pp0_iter17_reg[6 : 0];
        i_cast_reg_201_pp0_iter19_reg[6 : 0] <= i_cast_reg_201_pp0_iter18_reg[6 : 0];
        i_cast_reg_201_pp0_iter20_reg[6 : 0] <= i_cast_reg_201_pp0_iter19_reg[6 : 0];
        i_cast_reg_201_pp0_iter21_reg[6 : 0] <= i_cast_reg_201_pp0_iter20_reg[6 : 0];
        i_cast_reg_201_pp0_iter22_reg[6 : 0] <= i_cast_reg_201_pp0_iter21_reg[6 : 0];
        i_cast_reg_201_pp0_iter23_reg[6 : 0] <= i_cast_reg_201_pp0_iter22_reg[6 : 0];
        i_cast_reg_201_pp0_iter24_reg[6 : 0] <= i_cast_reg_201_pp0_iter23_reg[6 : 0];
        i_cast_reg_201_pp0_iter25_reg[6 : 0] <= i_cast_reg_201_pp0_iter24_reg[6 : 0];
        i_cast_reg_201_pp0_iter26_reg[6 : 0] <= i_cast_reg_201_pp0_iter25_reg[6 : 0];
        i_cast_reg_201_pp0_iter27_reg[6 : 0] <= i_cast_reg_201_pp0_iter26_reg[6 : 0];
        i_cast_reg_201_pp0_iter28_reg[6 : 0] <= i_cast_reg_201_pp0_iter27_reg[6 : 0];
        i_cast_reg_201_pp0_iter29_reg[6 : 0] <= i_cast_reg_201_pp0_iter28_reg[6 : 0];
        i_cast_reg_201_pp0_iter2_reg[6 : 0] <= i_cast_reg_201_pp0_iter1_reg[6 : 0];
        i_cast_reg_201_pp0_iter30_reg[6 : 0] <= i_cast_reg_201_pp0_iter29_reg[6 : 0];
        i_cast_reg_201_pp0_iter3_reg[6 : 0] <= i_cast_reg_201_pp0_iter2_reg[6 : 0];
        i_cast_reg_201_pp0_iter4_reg[6 : 0] <= i_cast_reg_201_pp0_iter3_reg[6 : 0];
        i_cast_reg_201_pp0_iter5_reg[6 : 0] <= i_cast_reg_201_pp0_iter4_reg[6 : 0];
        i_cast_reg_201_pp0_iter6_reg[6 : 0] <= i_cast_reg_201_pp0_iter5_reg[6 : 0];
        i_cast_reg_201_pp0_iter7_reg[6 : 0] <= i_cast_reg_201_pp0_iter6_reg[6 : 0];
        i_cast_reg_201_pp0_iter8_reg[6 : 0] <= i_cast_reg_201_pp0_iter7_reg[6 : 0];
        i_cast_reg_201_pp0_iter9_reg[6 : 0] <= i_cast_reg_201_pp0_iter8_reg[6 : 0];
        tmp_7_reg_216 <= grp_sin_or_cos_float_s_fu_106_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_fu_146_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_cast_reg_201[6 : 0] <= i_cast_fu_158_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_cast_reg_201_pp0_iter1_reg[6 : 0] <= i_cast_reg_201[6 : 0];
        x_load_reg_211 <= x_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp_s_reg_193 <= grp_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        x_assign_1_reg_188 <= grp_fu_133_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        y_read_reg_183 <= y;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln8_fu_146_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state28 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state28 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter31 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_EN_A = 1'b1;
    end else begin
        res_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter31 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_WEN_A = 4'd15;
    end else begin
        res_WEN_A = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_EN_A = 1'b1;
    end else begin
        x_EN_A = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln8_fu_146_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter31 == 1'b1) & (ap_enable_reg_pp0_iter30 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter31 == 1'b1) & (ap_enable_reg_pp0_iter30 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln8_fu_146_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln8_fu_152_p2 = (i_fu_70 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd28];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_sin_or_cos_float_s_fu_106_ap_start = grp_sin_or_cos_float_s_fu_106_ap_start_reg;

assign grp_sin_or_cos_float_s_fu_106_t_in = x_load_reg_211;

assign i_cast_fu_158_p1 = i_fu_70;

assign icmp_ln8_fu_146_p2 = ((i_fu_70 == 7'd100) ? 1'b1 : 1'b0);

assign res_Addr_A = res_Addr_A_orig << 32'd2;

assign res_Addr_A_orig = i_cast_reg_201_pp0_iter30_reg;

assign res_Clk_A = ap_clk;

assign res_Din_A = div_reg_226;

assign res_Rst_A = ap_rst_n_inv;

assign x_Addr_A = x_Addr_A_orig << 32'd2;

assign x_Addr_A_orig = i_cast_fu_158_p1;

assign x_Clk_A = ap_clk;

assign x_Din_A = 32'd0;

assign x_Rst_A = ap_rst_n_inv;

assign x_WEN_A = 4'd0;

always @ (posedge ap_clk) begin
    i_cast_reg_201[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter2_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter3_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter4_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter5_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter6_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter7_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter8_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter9_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter10_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter11_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter12_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter13_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter14_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter15_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter16_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter17_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter18_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter19_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter20_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter21_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter22_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter23_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter24_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter25_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter26_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter27_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter28_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter29_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_201_pp0_iter30_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //crazyFunction
